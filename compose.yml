version: '3.9'

services:
  nginx:
    container_name: m2-nginx
    build:
      context: .
      dockerfile: docker/images/nginx/Dockerfile
      args:
        DOMAIN: ${DOMAIN}
        APP_ID: ${APP_ID}
    command: /bin/sh -c "nginx -g 'daemon off;'"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./src:/var/www/html
      - ./.composer/cache:/var/www/.composer/cache:cached
    extra_hosts:
      - ${EXTRA_HOST}
    links:
      - php
      - db

  php:
    container_name: m2-php
    build:
      context: .
      dockerfile: docker/images/php/${PHP_VERSION}/Dockerfile
    ports:
      - "9000:9000"
    volumes:
      - ./src:/var/www/html
      - ./docker/settings/.bashrc:/var/www/.bashrc
      - ./src/app/code:/var/www/html/app/code:cached
      - ./src/app/design:/var/www/html/app/design:cached
      - ./src/app/etc:/var/www/html/app/etc:cached
      - ./src/composer.json:/var/www/html/composer.json:cached
      - ./src/composer.lock:/var/www/html/composer.lock:cached
      - ./src/grunt-config.json.sample:/var/www/html/grunt-config.json:cached
      - ./src/Gruntfile.js.sample:/var/www/html/Gruntfile.js:cached
      - ./src/dev/tools/grunt/configs:/var/www/html/dev/tools/grunt/configs:cached
      - ./src/nginx.conf.sample:/var/www/html/nginx.conf:cached
      - ./src/package.json.sample:/var/www/html/package.json:cached
    working_dir: /var/www/html
    extra_hosts:
      - "host.docker.internal:host-gateway"

  db:
    container_name: m2-db
    build:
      context: .
      dockerfile: docker/images/mysql/Dockerfile
    restart: always
    environment:
      MARIADB_ROOT_PASSWORD: magento
    command:
      --max_allowed_packet=1000M
#      --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"
    volumes:
#      - ./docker/images/mysql/data:/var/lib/mysql
      - ./docker/images/mysql/db/:/docker-entrypoint-initdb.d/
#      - ./docker/images/mysql/db:/docker-entrypoint-initdb-multi.d
    env_file:
      - ./docker/settings/db.env

#  elasticsearch:
#    container_name: m2-elasticsearch
#    build:
#      context: .
#      dockerfile: docker/images/elasticsearch/${ELASTICSEARCH_VERSION}/Dockerfile
#    ports:
#      - "9300:9300"
#      - "9200:9200"
#    env_file:
#      - ./docker/settings/elasticsearch.env
#    environment:
#      - "discovery.type=single-node"
#      - "cluster.routing.allocation.disk.threshold_enabled=false"
#      - "index.blocks.read_only_allow_delete"

  phpmyadmin:
    container_name: m2-phpmyadmin
    image: phpmyadmin/phpmyadmin:latest
    ports:
      - "8080:80"
    env_file:
      - ./docker/settings/db.env
    environment:
      - UPLOAD_LIMIT=1G
      - PMA_ARBITRARY=1
      - PMA_HOST=db
      - PMA_POST=3306
    restart: always
    depends_on:
      - db

  redis:
    container_name: m2-redis
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    env_file:
      - ./docker/settings/redis.env

  opensearch:
    build:
      context: .
      dockerfile: ./docker/images/opensearch/2.5/Dockerfile
    ports:
      - "9200:9200"
      - "9300:9300"
    env_file:
      - ./docker/settings/opensearch.env
    environment:
      - "discovery.type=single-node"
      - "cluster.routing.allocation.disk.threshold_enabled=false"
      - "index.blocks.read_only_allow_delete"

  rabbitmq:
    container_name: m2-rabbitmq
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    env_file:
      - ./docker/settings/rabbitmq.env

  mailhog:
    container_name: m2-mailhog
    image: mailhog/mailhog:latest
    restart: always
    ports:
     - 1025:1025
     - 8025:8025
    links:
      - php

volumes:
  rabbitmq-data:
